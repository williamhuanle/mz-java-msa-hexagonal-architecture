version: "3.9"
services:
#  redis:
#    image: redis:alpine
#    ports:
#      - "6379"
#    networks:
#      - frontend
#    deploy:
#      replicas: 2
#      update_config:
#        parallelism: 2
#        delay: 10s
#      restart_policy:
#        condition: on-failure

  mysqldb:
    image: mysql/mysql-server:latest
    container_name: mysql-container
    ports:
      - "3306:3306"
    restart: always
    environment:
      MYSQL_DATABASE: mz_db_admin
      MYSQL_USER: dev
      MYSQL_PASSWORD: mzMysql123@
      MYSQL_ROOT_PASSWORD: mzMysql123@
    volumes:
      - db-data:/var/lib/mysql/data
    networks:
      - backend
    deploy:
      placement:
        max_replicas_per_node: 1
        constraints:
          - "node.role==manager"

#  vote:
#    image: dockersamples/examplevotingapp_vote:before
#    ports:
#      - "5000:80"
#    networks:
#      - frontend
#    depends_on:
#      - redis
#    deploy:
#      replicas: 2
#      update_config:
#        parallelism: 2
#      restart_policy:
#        condition: on-failure

  admin-service:
    image: admin-service:latest
    container_name: admin-service-container
    ports:
      - "8081:8081"
    networks:
      - backend
    depends_on:
      - mysqldb
    deploy:
      replicas: 1
      update_config:
        parallelism: 2
        delay: 10s
      restart_policy:
        condition: on-failure
#
#  worker:
#    image: dockersamples/examplevotingapp_worker
#    networks:
#      - frontend
#      - backend
#    deploy:
#      mode: replicated
#      replicas: 1
#      labels: [APP=VOTING]
#      restart_policy:
#        condition: on-failure
#        delay: 10s
#        max_attempts: 3
#        window: 120s
#      placement:
#        constraints:
#          - "node.role==manager"
#
#  visualizer:
#    image: dockersamples/visualizer:stable
#    ports:
#      - "8080:8080"
#    stop_grace_period: 1m30s
#    volumes:
#      - "/var/run/docker.sock:/var/run/docker.sock"
#    deploy:
#      placement:
#        constraints:
#          - "node.role==manager"

networks:
#  frontend:
  backend:

volumes:
  db-data:
